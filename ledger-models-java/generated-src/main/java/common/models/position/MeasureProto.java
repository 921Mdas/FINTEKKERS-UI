// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: models/position/measure.proto

package common.models.position;

/**
 * Protobuf enum {@code position.MeasureProto}
 */
public enum MeasureProto
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>UNKNOWN_MEASURE = 0;</code>
   */
  UNKNOWN_MEASURE(0),
  /**
   * <code>DIRECTED_QUANTITY = 1;</code>
   */
  DIRECTED_QUANTITY(1),
  /**
   * <code>MARKET_VALUE = 2;</code>
   */
  MARKET_VALUE(2),
  /**
   * <code>UNADJUSTED_COST_BASIS = 3;</code>
   */
  UNADJUSTED_COST_BASIS(3),
  /**
   * <code>ADJUSTED_COST_BASIS = 4;</code>
   */
  ADJUSTED_COST_BASIS(4),
  /**
   * <pre>
   * The current yield of the security, essentially coupon / current price. The price can be
   * unadjusted cost basis, adjusted cost basis, market value, and so on. This is a bond-centric
   * calculation. For equity securities, the TTM dividends will be used as a coupon equivalent (not
   * currently supported).
   * </pre>
   *
   * <code>CURRENT_YIELD = 5;</code>
   */
  CURRENT_YIELD(5),
  /**
   * <pre>
   * The yield if the security is held to maturity. For equities, this will be blank.
   * For bonds this will be calculated as: https://www.wallstreetprep.com/knowledge/yield-to-maturity-ytm/
   * For TIPS, no future inflation adjustments to principal will be included.
   * For FRNs, the assumption is the floating rate doesn't change between now and maturity.
   * In the future, context-overrides will allow customization of these assumptions
   * </pre>
   *
   * <code>YIELD_TO_MATURITY = 7;</code>
   */
  YIELD_TO_MATURITY(7),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>UNKNOWN_MEASURE = 0;</code>
   */
  public static final int UNKNOWN_MEASURE_VALUE = 0;
  /**
   * <code>DIRECTED_QUANTITY = 1;</code>
   */
  public static final int DIRECTED_QUANTITY_VALUE = 1;
  /**
   * <code>MARKET_VALUE = 2;</code>
   */
  public static final int MARKET_VALUE_VALUE = 2;
  /**
   * <code>UNADJUSTED_COST_BASIS = 3;</code>
   */
  public static final int UNADJUSTED_COST_BASIS_VALUE = 3;
  /**
   * <code>ADJUSTED_COST_BASIS = 4;</code>
   */
  public static final int ADJUSTED_COST_BASIS_VALUE = 4;
  /**
   * <pre>
   * The current yield of the security, essentially coupon / current price. The price can be
   * unadjusted cost basis, adjusted cost basis, market value, and so on. This is a bond-centric
   * calculation. For equity securities, the TTM dividends will be used as a coupon equivalent (not
   * currently supported).
   * </pre>
   *
   * <code>CURRENT_YIELD = 5;</code>
   */
  public static final int CURRENT_YIELD_VALUE = 5;
  /**
   * <pre>
   * The yield if the security is held to maturity. For equities, this will be blank.
   * For bonds this will be calculated as: https://www.wallstreetprep.com/knowledge/yield-to-maturity-ytm/
   * For TIPS, no future inflation adjustments to principal will be included.
   * For FRNs, the assumption is the floating rate doesn't change between now and maturity.
   * In the future, context-overrides will allow customization of these assumptions
   * </pre>
   *
   * <code>YIELD_TO_MATURITY = 7;</code>
   */
  public static final int YIELD_TO_MATURITY_VALUE = 7;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static MeasureProto valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static MeasureProto forNumber(int value) {
    switch (value) {
      case 0: return UNKNOWN_MEASURE;
      case 1: return DIRECTED_QUANTITY;
      case 2: return MARKET_VALUE;
      case 3: return UNADJUSTED_COST_BASIS;
      case 4: return ADJUSTED_COST_BASIS;
      case 5: return CURRENT_YIELD;
      case 7: return YIELD_TO_MATURITY;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<MeasureProto>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      MeasureProto> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<MeasureProto>() {
          public MeasureProto findValueByNumber(int number) {
            return MeasureProto.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return common.models.position.MeasureProtos.getDescriptor().getEnumTypes().get(0);
  }

  private static final MeasureProto[] VALUES = values();

  public static MeasureProto valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private MeasureProto(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:position.MeasureProto)
}

