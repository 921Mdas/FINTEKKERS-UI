name: Publish package to Pypi
on:
  push:
    tags:  #only trigger action when tagged with release number, i.e v0.0.1     
      - 'v*'    
  workflow_dispatch:
  
defaults:
  run:
    shell: bash
    working-directory: ledger-models-python

jobs:
  publish-pypi:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # - name: Get git tag extension
      #   id: tag
      #   uses: dawidd6/action-get-tag@v1
      - name: Release details
        run: |
          echo Release tag ${{ steps.tag.outputs.tag }}
          TAG=v0.0.8
          echo tag is ${TAG}
          VERSION=${TAG#v}
          echo version is ${VERSION}
          echo "release_version=${VERSION}" >> $GITHUB_ENV
      - name: Print Environment Variables
        run: env
      - name: Build & Publish
        run: |
          pwd

          BUILD_VERSION=${{ env.release_version }}

          python3 -m pip install --upgrade build && python3 -m build
          pip3 install twine
          
          twine upload -u __token__ -p "${{ secrets.PYPI_TOKEN }}" --repository pypi dist/*
      # - name: Publish package
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #     password: ${{ secrets.PYPI_TOKEN }}

# jobs:
#   publish-java-package:
#     runs-on: ubuntu-latest 
#     permissions: 
#       contents: read
#       packages: write 
#     steps:
#     - uses: actions/checkout@v3
#     - uses: actions/setup-java@v3
#       with:
#          java-version: '18'
#          distribution: 'adopt'
#     - name: Get git tag extension
#       id: tag
#       uses: dawidd6/action-get-tag@v1
#     - name: Release details
#       run: |
#         echo Release tag ${{ steps.tag.outputs.tag }}
#         TAG=${{ steps.tag.outputs.tag }}
#         echo tag is ${TAG}
#         VERSION=${TAG#v}
#         echo version is ${VERSION}
#         echo "release_version=${VERSION}" >> $GITHUB_ENV
#     - name: Print Environment Variables
#       run: env
#     - name: Execute Gradle build
#       run: ./gradlew publish
#       env:
#         PUBLISH_TOKEN: ${{ secrets.PUBLISH_TOKEN }}
#         run_number: ${{ env.release_version }}
        
